{"version":3,"sources":["components/TrafficLight/index.js","actions/index.js","components/TrafficLightContainer/index.js","components/Configuration/index.js","App.js","serviceWorker.js","reducer/reducer.js","reducer/rootReducer.js","index.js"],"names":["TrafficLight","_ref","onRedClick","onGreenClick","RedOn","GreenOn","Size","BlackColor","DisabledColor","RedColor","GreenColor","props","Object","objectWithoutProperties","react_default","a","createElement","assign","width","concat","height","viewBox","version","style","cursor","undefined","id","cx","cy","r","x","y","filterUnits","stdDeviation","in","result","dx","dy","in2","operator","k2","k3","values","type","fill","rx","fillRule","xlinkHref","onClick","fillOpacity","filter","defaultProps","LOAD_URL_STATUS","loadUrlStatus","url","asyncToGenerator","regenerator_default","mark","_callee","dispatch","request","wrap","_context","prev","next","axios","get","then","response","console","log","status","catch","error","sent","payload","stop","_x","apply","this","arguments","TrafficLightContainer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","redOn","yellowOn","greenOn","_this$props","pollingAction","duration","clearInterval","dataPolling","_this2","components_TrafficLight","setState","React","Component","connect","_objectSpread","bindActionCreators","Configuration","Fragment","components_TrafficLightContainer","App","apiResponse","fetch","res","text","callAPI","className","components_Configuration","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","data","length","action","reducer_objectSpread","store","createStore","compose","applyMiddleware","thunkMiddleware","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25372684.chunk.js","sourcesContent":["/* eslint-disable max-len */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst scale = 1 / 0.375;\n\nconst TrafficLight = ({\n  onRedClick,\n  onGreenClick,\n  RedOn,\n  GreenOn,\n  Size,\n  BlackColor,\n  DisabledColor,\n  RedColor,\n  GreenColor,\n  ...props\n}) => (\n  <svg width={`${Size}px`} height={`${Size * scale}px`} viewBox=\"0 0 60 110\" version=\"1.1\" {...props}>\n    <defs>\n      <circle style={{ cursor: onRedClick ? 'pointer' : undefined }} id=\"redCirclePath\" cx=\"30\" cy=\"30\" r=\"20\" />\n      <circle style={{ cursor: onGreenClick ? 'pointer' : undefined }} id=\"greenCirclePath\" cx=\"30\" cy=\"80\" r=\"20\" />\n\n      <filter x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\" filterUnits=\"objectBoundingBox\" id=\"shadowFilter\">\n        <feGaussianBlur stdDeviation=\"3\" in=\"SourceAlpha\" result=\"shadowBlurInner1\" />\n        <feOffset dx=\"0\" dy=\"4\" in=\"shadowBlurInner1\" result=\"shadowOffsetInner1\" />\n        <feComposite in=\"shadowOffsetInner1\" in2=\"SourceAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" result=\"shadowInnerInner1\" />\n        <feColorMatrix values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0\" type=\"matrix\" in=\"shadowInnerInner1\" />\n      </filter>\n    </defs>\n    <rect fill={BlackColor} x=\"0\" y=\"0\" width=\"60\" height=\"110\" rx=\"8\" />\n\n    <use fill={RedOn ? RedColor : DisabledColor} fillRule=\"evenodd\" xlinkHref=\"#redCirclePath\" />\n    <use fill={GreenOn ? GreenColor : DisabledColor} fillRule=\"evenodd\" xlinkHref=\"#greenCirclePath\" />\n\n    <g>\n      <use onClick={onRedClick} fill=\"black\" fillOpacity=\"1\" filter=\"url(#shadowFilter)\" xlinkHref=\"#redCirclePath\" />\n      <use onClick={onGreenClick} fill=\"black\" fillOpacity=\"1\" filter=\"url(#shadowFilter)\" xlinkHref=\"#greenCirclePath\" />\n    </g>\n  </svg>\n);\n\nTrafficLight.propTypes = {\n  onRedClick: PropTypes.func,\n  onGreenClick: PropTypes.func,\n  RedOn: PropTypes.bool,\n  GreenOn: PropTypes.bool,\n  Size: PropTypes.number,\n  BlackColor: PropTypes.string,\n  DisabledColor: PropTypes.string,\n  RedColor: PropTypes.string,\n  GreenColor: PropTypes.string,\n};\n\nTrafficLight.defaultProps = {\n  onRedClick: undefined,\n  onGreenClick: undefined,\n  RedOn: false,\n  GreenOn: false,\n  Size: 60,\n  BlackColor: '#000000',\n  DisabledColor: '#4A4A4A',\n  RedColor: '#D0021B',\n  GreenColor: '#7ED321',\n};\n\nexport default TrafficLight;\n","import axios from \"axios\";\n\nexport const LOAD_URL_STATUS = \"LOAD_URL_STATUS\";\n\nexport function loadUrlStatus(url) {\n  \n  return async function(dispatch) {\n    const request = await axios\n      .get(url)\n      .then(response => {\n        console.log(response.status);\n        return response.status;\n      })\n      .catch(error => {\n        console.log(\"Looks like there was a problem: \\n\", error);\n      });\n    console.log(request);\n    console.log(LOAD_URL_STATUS);\n    dispatch({\n      type: LOAD_URL_STATUS,\n      payload: request\n    });\n  };\n}\n\n","import React from 'react';\nimport TrafficLight from '../TrafficLight';\nimport {connect} from 'react-redux';\nimport {loadUrlStatus} from \"../../actions\";\n//import {withPolling} from \"../Polling\";\n//import Polling from \"../Polling/polling\";\nimport { bindActionCreators } from 'redux'; \n\nclass TrafficLightContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      redOn: true,\n      yellowOn: false,\n      greenOn: false,\n    }\n  }\n  \n  componentDidMount(){\nconsole.log(\"componentDidMount\")\nconst {pollingAction, duration, url} = this.props\n    //withPolling(this.props.loadUrlStatus(this.props.url),1)\n    /*\n    const {pollingAction, duration, url} = this.props\n    this.dataPolling = setInterval(\n                    () => {\n                        this.props.loadUrlStatus(url);\n                    },\n                    10000);\n*/\nthis.props.loadUrlStatus(url);\n  };\n\n  componentWillUnmount() {\n                clearInterval(this.dataPolling);\n            }\n\n  render() {\n    console.log(this.props)\n    return (\n      <TrafficLight\n        Size={100}\n        onRedClick={() => this.setState({ redOn: !this.state.redOn })}\n        onGreenClick={() => this.setState({ greenOn: !this.state.greenOn })}\n        RedOn={this.state.redOn}\n        GreenOn={this.state.greenOn}\n      />\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n    ...state\n});\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n\tloadUrlStatus\n    },\n    dispatch\n  );\n};\n\nexport default (\n    connect(mapStateToProps, mapDispatchToProps)(TrafficLightContainer));\n","import React from 'react';\nimport TrafficLightContainer from '../TrafficLightContainer';\n\nclass Configuration extends React.Component {\n\n  render(){\n    const { url } = this.props;\n    console.log(url);\n    return (<><TrafficLightContainer url={url} /></>);\n  }\n}\n\nexport default Configuration; \n","import React, { Component } from 'react';\nimport './App.css';\nimport Configuration from './components/Configuration';\n\nclass App extends Component {\n\nconstructor(props) {\n    super(props);\n    this.state = { apiResponse: \"\" };\n} \n\n  callAPI() {\n    fetch(\"http://www.banglarelief.org:9010/config\")\n        .then(res => res.text())\n        .then(res => this.setState({ apiResponse: res }));\n}\n\ncomponentDidMount() {\n    this.callAPI();\n}\nrender(){\n  return (\n    <div className=\"App\">\n\t<Configuration url={`/`} />\n <p className=\"App-intro\">;{this.state.apiResponse}</p>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {LOAD_URL_STATUS} from \"../actions\";\nconst initialState = {\n    status: null\n};\nexport default function reducer(state = initialState, action) {\nconsole.log(action)\n    switch (action.type) {\n        case LOAD_URL_STATUS: {\n\tconsole.log(state, action)\n            return {\n                ...state,\n                status: action\n            }\n        }\n        default: {\nconsole.log(state)\n            return state;\n        }\n    }\n}\n","import {combineReducers} from 'redux';\nimport data from './reducer';\nconst rootReducer = combineReducers({\n    data\n});\nexport default rootReducer;\n","import React from 'react';\nimport { render } from 'react-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureStore from './configureStore'\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from './reducer/rootReducer';\n\nconst store = createStore(rootReducer, compose(applyMiddleware(thunkMiddleware)));\n//const configureStore = createStore(rootReducer);\n//const store = configureStore();\n\nconst renderApp = () =>\n  render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, \n\tdocument.getElementById('root')\n  );\n\n\n\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n  module.hot.accept('./App', renderApp)\n}\n\nrenderApp();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}